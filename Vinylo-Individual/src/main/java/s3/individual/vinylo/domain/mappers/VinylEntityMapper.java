package s3.individual.vinylo.domain.mappers;

import java.util.List;

import org.springframework.stereotype.Component;

import s3.individual.vinylo.domain.Vinyl;
import s3.individual.vinylo.domain.dtos.VinylDTO;
import s3.individual.vinylo.domain.dtos.VinylsDTO;
import s3.individual.vinylo.exceptions.CustomNotFoundException;
import s3.individual.vinylo.persistence.entity.ArtistEntity;
import s3.individual.vinylo.persistence.entity.SpeedEnum;
import s3.individual.vinylo.persistence.entity.StateEnum;
import s3.individual.vinylo.persistence.entity.VinylColorEnum;
import s3.individual.vinylo.persistence.entity.VinylEntity;
import s3.individual.vinylo.persistence.entity.VinylTypeEnum;
import s3.individual.vinylo.persistence.jparepository.ArtistJPARepo;

@Component // Make this class a Spring-managed bean
public class VinylEntityMapper {

    private static ArtistJPARepo artistJPARepo;

    public VinylEntityMapper(ArtistJPARepo artistJPARepo) {
        VinylEntityMapper.artistJPARepo = artistJPARepo;
    }

    // private VinylEntityMapper() {
    // throw new UnsupportedOperationException("Utility class");
    // }

    // Converts Vinyl domain object to VinylEntity
    public static VinylEntity toEntity(Vinyl vinyl) {
        if (vinyl == null) {
            return null;
        }

        VinylEntity vinylEntity = new VinylEntity();
        // Do not set ID, as it's auto-generated by the database
        vinylEntity.setVinylType(vinyl.getVinylType().name());
        vinylEntity.setSpeed(vinyl.getSpeed().name());
        vinylEntity.setTitle(vinyl.getTitle());
        vinylEntity.setDescription(vinyl.getDescription());
        vinylEntity.setState(vinyl.getState().name());
        vinylEntity.setColor(vinyl.getColor().name());
        vinylEntity.setIsReleased(vinyl.getIsReleased());

        // Handling the artist entity correctly
        if (vinyl.getArtist() != null && vinyl.getArtist().getId() != null) { // Adjust if getId() is an Integer
            ArtistEntity artistEntity = artistJPARepo.findById(vinyl.getArtist().getId()).orElseThrow(
                    () -> new CustomNotFoundException("ArtistEntity not found in VinylMapper"));
            vinylEntity.setArtist(artistEntity);
        }
        vinylEntity.setSpotifyAlbumId(vinyl.getSpotifyAlbumId());

        return vinylEntity;
    }

    // Converts VinylEntity to Vinyl domain object
    public static Vinyl fromEntity(VinylEntity entity) {
        if (entity == null) {
            return null;
        }

        Vinyl vinyl = new Vinyl();
        vinyl.setId(entity.getId()); // Retrieve the auto-generated ID from the entity
        vinyl.setVinylType(VinylTypeEnum.valueOf(entity.getVinylType()));
        vinyl.setSpeed(SpeedEnum.valueOf(entity.getSpeed()));
        vinyl.setTitle(entity.getTitle());
        vinyl.setDescription(entity.getDescription());
        vinyl.setState(StateEnum.valueOf(entity.getState()));
        vinyl.setColor(VinylColorEnum.valueOf(entity.getColor()));
        vinyl.setIsReleased(entity.getIsReleased());
        vinyl.setArtist(ArtistEntityMapper.fromEntity(entity.getArtist()));
        vinyl.setSpotifyAlbumId(entity.getSpotifyAlbumId());

        return vinyl;
    }

    public static VinylDTO toVinylDTO(VinylEntity entity) {
        if (entity == null) {
            return null;
        }

        VinylDTO vinylDTO = new VinylDTO();

        vinylDTO.setId(entity.getId());
        vinylDTO.setVinylType(entity.getVinylType());
        vinylDTO.setSpeed(entity.getSpeed());
        vinylDTO.setTitle(entity.getTitle());
        vinylDTO.setDescription(entity.getDescription());
        vinylDTO.setState(entity.getState());
        vinylDTO.setColor(entity.getColor());
        vinylDTO.setIsReleased(entity.getIsReleased());
        vinylDTO.setArtist_id(entity.getArtist().getId());
        vinylDTO.setSpotifyAlbumId(entity.getSpotifyAlbumId());

        return vinylDTO;
    }

    public static VinylDTO toVinylDTOSummary(VinylEntity entity) {

        if (entity == null) {
            return null;
        }

        VinylDTO vinylDTO = new VinylDTO();

        vinylDTO.setId(entity.getId());
        vinylDTO.setVinylType(entity.getVinylType().toString());
        vinylDTO.setTitle(entity.getTitle());
        vinylDTO.setState(entity.getState().toString());

        return vinylDTO;
    }

    public static VinylsDTO toVinylSummaryDTO(List<VinylEntity> entity) {
        VinylsDTO dtos = new VinylsDTO();
        for (VinylEntity v : entity) {
            dtos.getVinyls().add(toVinylDTOSummary(v));
        }

        return dtos;
    }
}
